* sprout

[[https://opioid.github.io/sprout/images/san_miguel_720.jpg]]
[[http://casual-effects.com/data/index.html][San Miguel 2.0]]

** Brief

sprout is a small raytracing renderer written in C++. I work on it to learn about, and experiment with computer graphics, focused mainly on physically based rendering, and global illumination.

The overall architecture is heavily inspired by [[http://www.pbrt.org/][PBRT]], while the implementation details differ more or less strongly in various places.

At the moment the default integrator is a uni-directional path tracer with forward prediction and multiple importance sampling. A combination of a rudimentary light tracer and photon mapper can assist with caustic paths. Mesh lights and image-based lights are supported.

The default material is inspired by the [[https://disney-animation.s3.amazonaws.com/library/s2012_pbs_disney_brdf_notes_v2.pdf][Disney]] and [[http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf][Unreal 4]] material models. It uses a combination of the Disney Diffuse BRDF and GGX with adjustable roughness and metallic parameters. Optionally subsurface scattering can be enabled. Most parameters like color, roughness, and normals can be controlled via texture mapping. Specialized materials for e.g. metal and glass are also available.

There is support for a few built in shapes (sphere, disk, plane...) as well as triangle meshes. Those shapes are shared between solid objects, volumetric objects, and light emitters.

Support for heterogeneous participating media and subsurface scattering is based on the spectral tracking technique [[http://drz.disneyresearch.com/~jnovak/publications/SDTracking/SDTracking.pdf][described here]].

A render is configurable by json files which describe the different parts of the scene (shapes, lights, material parameters etc.) as well as camera and renderer settings. For performance reasons, images and meshes are stored in a binary format.

** Gallery

A few images rendered with sprout can be found in the [[https://opioid.github.io/sprout/gallery.html][gallery]]. 

** Build

#+BEGIN_EXAMPLE
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release ../source
make
#+END_EXAMPLE

[[https://travis-ci.org/Opioid/sprout][https://api.travis-ci.org/Opioid/sprout.svg?branch%3Dmaster]]

All source files needed to build the project are included in the repository and organized with cmake.

sprout needs a compiler with c++17 support.

On Linux it should work with Clang 8 and libstdc++ 8 or higher.
It should also build with GCC 8 or higher.
On Windows it should work with Visual Studio 2017 or a newer version.

** Dependencies

I try to keep the number of required dependencies reasonably low in this project. At the moment there are two/three. All of them are included in the repository directly with all necessary source code.

1. [[https://github.com/richgel999/miniz][Miniz]] for encoding/decoding PNG images and decompressing gz archives
2. [[https://github.com/miloyip/rapidjson][RapidJSON]] for parsing json files
3. ([[https://github.com/facebook/zstd][Zstandard]] as an additional compression option; this is not essential and can easily be disabled)

If you have [[https://www.ffmpeg.org/][FFmpeg]] installed you can export animations to mp4, but it is neither required to build nor to run.

Additionally, the repository includes a slightly modified copy of the [[http://cgg.mff.cuni.cz/projects/SkylightModelling/][Hosek]] sky model. The main changes are a conversion from ~double~ to ~float~ type, optimizations of pow() with a constant exponent, and modifying the solar radius to better match various sources quoting this number.
