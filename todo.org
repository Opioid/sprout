* Backlog

** Integrators

*** TODO Subsurface scattering
- [X] Implement single scattering 
- [ ] Implement multiple scattering
  - [ ] Monte-carlo integrator
  - [ ] Next event estimation

** Materials

*** TODO Cloth material
- [ ] Investigate dedicated cloth material with alternative BRDF (e.g. Ashikhmin)

*** TODO Separate samplers
- [ ] Consider adding support for separate samplers per texture

** Shapes

*** TODO Adding/improving analytical shapes
- [-] Canopy/Half-sphere
  - [X] Intersection
  - [ ] UV sampling
- [ ] Cylinder

*** TODO Consider visibility settings per part

** Resources

*** TODO Faster file loading
- [X] Consider concurrent loading during lengthy processing steps (e.g. building BVH)
- [ ] Consider embedding json and binary data in single file

There is a very simple mechanism for asynchronous BVH construction now. 
It seems to work quite well in cases where BVH construction is followed by lengthy reads from disk.
In those cases the time required for BVH construction can be hidden to a certain degree.

** Build system

*** TODO cmake-based build system

** Renderer

*** TODO Lock-free tile enumeration
- [X] Pre-determined "Tiled scanline" with initial offset (slower)
- [ ] +Space filling curve (e.g. z-curve or hilbert-curve)+
- [ ] Atomics for access to next tile

It seems that the mutex communication is not the bottleneck in this scenario. 
Something with atomics might be interesting, but will probably not noticeably affect overall performance.

** Scene

*** TODO Faster scene update
- [-] Investigate opportunities to parallelize some parts of scene update
  - [-] Calculation of distribution LUTs for light sources
	- [X] Image
	- [ ] Mesh
  - [ ] Updating of entity transformations

The results are disappointing so far (e.g. less than 2x speedup for 12 threads).
